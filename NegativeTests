trigger:

trigger Week4HomeworkRecipeTrigger on Recipe__c (before insert, after insert, before update, after update) {
    
    if (trigger.isBefore ){
        if( trigger.isInsert || trigger.isUpdate)
        {
            Week4HomeworkRecipeTriggerHandler.DraftCheckAndComplexityRating();
            Week4HomeworkRecipeTriggerHandler.noNegativeServings();
        }
    }	
    if (trigger.isAfter ){
        if( trigger.isInsert || trigger.isUpdate)
        {
            Week4HomeworkRecipeTriggerHandler.createAReviewTask();
        }
    }	
}

Handler class:

public class Week4HomeworkRecipeTriggerHandler {
    public class RecException extends exception{}
    //method to handle if servings entered is negative
     public static void noNegativeServings(){
    for (Recipe__c r: (List<Recipe__c>) Trigger.new) {
    if(r.Servings__c < 0){
      throw new RecException('Serving Size Cannot be Negative');
    }
   }
 }

public static void DraftCheckAndComplexityRating() {
    list<Recipe__c> newRecipes = new list<Recipe__c>();
    for (Recipe__c r: (List<Recipe__c>) Trigger.new) {
      
      if (r.Active_Time__c == NULL || r.Description__c == NULL || r.Active_Time_Units__c == NULL || r.Servings__c == NULL || r.Name__c == NULL) {
        
          r.Draft__c = true;
          
          Integer rating = HelperFunctions.rateRecipeComplexity(r);
            if(rating == 1) {r.Complexity__c ='Simple';
                            }
            else if (rating == 2) {r.Complexity__c ='Moderate';
                                  }
            else if (rating == 3) {r.Complexity__c ='Difficult';
                                  }
            else {r.Complexity__c = '';
                 }
            newRecipes.add(r);
      }//end if statement
   }//end for loop
    }//end method	

    public static void createAReviewTask (){
        //instantiate and configure Due Date variable to make the task due-date 1 week from today
        Date dDate = Date.today(); //sets today's date
        dDate = dDate.addDays(7); //adds one week
        //instanitate an empty task list to collect all the review tasks to be added
        List<Task> newReviews = new List<Task>();
        // create the list of recipes to hold the trigger's items
        List<Recipe__c> newRecipes = new List<Recipe__c>([SELECT Id, Name, Draft__c, OwnerId, (SELECT Id, Recipe__c FROM Recipe_Usages__r) FROM Recipe__c WHERE Id in :Trigger.newMap.keySet()]);
        //loop through the recipes in the trigger to see if they're drafts or have usage records
        for(Recipe__c r :newRecipes){
          if (String.isNotBlank(r.Id) && !r.Draft__c && !r.Recipe_Usages__r.isEmpty()){ 
                 //create a new task record if the recipe isnt a draft and has a usage record
                //assign review to the recipe owner (user who owns the cookbook?)
                //set due date for one week using variable created above                                   
                Task myRev = new Task(
                    WhatId = r.ID,
                    Subject = 'Review of ' + r.Name,
                    Status = 'Not Started',
                    ActivityDate = dDate,
                    OwnerId = r.OwnerId);
                //add this new review sObject to our list of reviews
                newReviews.add(myRev);
            } //end if loop
            //Insert the Tasks
            Insert newReviews;
        }//end for loop
    }//end method
   
}//end handler class

Handler Test Class:

@isTest
public class Week4HomeworkRecipeTriggerHandler_Test {
     @TestSetup
  static void testSetup(){
        Recipe__c rec = new Recipe__c();
        rec.Name = 'Test Recipe 1';
        rec.Active_Time__c = NULL;
		rec.Description__c = NULL;
		rec.Active_Time_Units__c = NULL;
		rec.Servings__c = NULL;
        insert rec;
      Recipe__c rec2 = new Recipe__c();
        rec2.Name = 'Test Recipe 2';
        rec2.Active_Time__c = NULL;
		rec2.Description__c = NULL;
		rec2.Active_Time_Units__c = NULL;
		rec2.Servings__c = 2;
       insert rec2;
  }
        
  @isTest static void positivetestBeforeTrigger () {       
       Recipe__c tr = [SELECT ID, Draft__c, Complexity__c FROM Recipe__c WHERE Name = 'Test Recipe 1' ];
          
        System.assertEquals(true,tr.Draft__c);
        System.assertEquals('Simple', tr.Complexity__c);
}
@isTest static void negativeTestBeforeTrigger () { 
       Boolean caught = true;
        try{
         Recipe__c tr = new Recipe__c(Name = 'TestRecipe', Servings__c = -20);
               }
        catch(Week4HomeworkRecipeTriggerHandler.RecException rex)
        {
            System.assertEquals('Serving Size Cannot be Negative', rex.getMessage());
            caught = true;                
        }
        system.assert(caught,'threw expected exception');
}  
    @isTest static void testAfterTrigger () {   
        
        // create test recipe - not a draft
        Recipe__c testr = new Recipe__c();
        testr.Name = 'Test Recipe';
        testr.Name__c = 'Still Test Recipe';
        testr.Active_Time__c = 45; 
        testr.Description__c = 'Description of Test recipe ';
        testr.Active_Time_Units__c= 'Minutes';
        testr.Servings__c= 6; 
        
        insert testr;
        
        //Create a cookbook
        Cookbook__c cb = new Cookbook__c(); 
        cb.Name = 'Test Cookbook';
        cb.Status__c = 'Published';
        
        insert cb;
             
        //Create usage record
        Recipe_Usage__c cbuse = new Recipe_Usage__c(); 
        cbuse.Cookbook__c = cb.Id; 
        cbuse.Recipe__c = testr.Id;
        
        insert cbuse;
    
        update testr;
        
        Recipe__c rec = [SELECT ID FROM Recipe__c WHERE ID=:testr.Id];
        list<task> rev = [SELECT Subject FROM task WHERE WhatId = :rec.Id ];
        
        System.assertEquals(1, rev.size(), 'There should be 1 task for this recipe'); 
        
    }
}
