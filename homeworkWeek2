public class WeekTwoHomework {
    /*A method that includes a query for a List of contacts and returns the Account
Name and Industry as well. Use a loop to print the name of each Contact’s
Account Name with System.debug.*/
    public static void childToParentRelationshipQueries () {
        List<Contact> contactsWithAccountStuff = new List<Contact>();
        for (Contact con : [SELECT ID, AccountId, Account.Name, Account.Industry FROM Contact]){
            System.debug('Contact Account Name is: '+ con.Account.Name);
        }
    }
    /*A method that includes a query for a list of Accounts AND includes all their
closed-won opportunities in a subquery. Use a loop to print out the name of
each Account’s opportunity with System.debug.*/
    public static void parentToChildRelationshipQueries () {
        List<Account> acctsWithWonOpptys = new List<Account>();
        for (Account acct : [SELECT Name, (SELECT Name, IsWon FROM Opportunities WHERE IsWon = TRUE)
                             FROM Account]){
                                 System.debug('Won Opportunity Name is: '+ acct.Opportunities);
                             }
    }
    /*A method for Opportunity records that returns results in a map format.*/
    public static void mapFromSOQLResults () {
        
        Map < ID, Opportunity > opptyMap = new Map < ID, Opportunity >([SELECT ID, Name FROM Opportunity]);
        
    }
    /*An aggregate results query that returns an integer equal to the total number of
open opportunities in your org.*/
    public static void orgOpenOpptys () {
        Integer opptyCount = [SELECT COUNT() FROM Opportunity];
        System.debug('We have ' + opptyCount + ' Opportunities!');
    }
}
